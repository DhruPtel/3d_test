{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallback, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function connectContractToSigner(contract, options, library) {\n  if (contract.signer) {\n    return contract;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.signer) {\n    return contract.connect(options.signer);\n  }\n\n  if (library === null || library === void 0 ? void 0 : library.getSigner()) {\n    return contract.connect(library.getSigner());\n  }\n\n  throw new TypeError('No signer available in contract, options or library');\n}\n/**\n * @public\n */\n\nexport function useContractFunction(contract, functionName, options) {\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var _usePromiseTransactio = usePromiseTransaction(chainId, options),\n      promiseTransaction = _usePromiseTransactio.promiseTransaction,\n      state = _usePromiseTransactio.state,\n      resetState = _usePromiseTransactio.resetState;\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  var send = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var contractWithSigner,\n        receipt,\n        _events,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contractWithSigner = connectContractToSigner(contract, options, library);\n            _context.next = 3;\n            return promiseTransaction(contractWithSigner[functionName].apply(contractWithSigner, _args));\n\n          case 3:\n            receipt = _context.sent;\n\n            if (receipt === null || receipt === void 0 ? void 0 : receipt.logs) {\n              _events = receipt.logs.reduce(function (accumulatedLogs, log) {\n                try {\n                  return log.address.toLowerCase() === contract.address.toLowerCase() ? [].concat(_toConsumableArray(accumulatedLogs), [contract.interface.parseLog(log)]) : accumulatedLogs;\n                } catch (_err) {\n                  return accumulatedLogs;\n                }\n              }, []);\n              setEvents(_events);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [contract, functionName, options, library]);\n  return {\n    send: send,\n    state: state,\n    events: events,\n    resetState: resetState\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useContractFunction.ts"],"names":[],"mappings":";;;;AAGA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AAIA;;AAEG;;AACH,OAAM,SAAU,uBAAV,CAAkC,QAAlC,EAAsD,OAAtD,EAAoF,OAApF,EAA6G;EACjH,IAAI,QAAQ,CAAC,MAAb,EAAqB;IACnB,OAAO,QAAP;EACD;;EAED,IAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAb,EAAqB;IACnB,OAAO,QAAQ,CAAC,OAAT,CAAiB,OAAO,CAAC,MAAzB,CAAP;EACD;;EAED,IAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,EAAJ,EAA0B;IACxB,OAAO,QAAQ,CAAC,OAAT,CAAiB,OAAO,CAAC,SAAR,EAAjB,CAAP;EACD;;EAED,MAAM,IAAI,SAAJ,CAAc,qDAAd,CAAN;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,mBAAV,CACJ,QADI,EAEJ,YAFI,EAGJ,OAHI,EAGwB;EAE5B,iBAA6B,SAAS,EAAtC;EAAA,IAAQ,OAAR,cAAQ,OAAR;EAAA,IAAiB,OAAjB,cAAiB,OAAjB;;EACA,4BAAkD,qBAAqB,CAAC,OAAD,EAAU,OAAV,CAAvE;EAAA,IAAQ,kBAAR,yBAAQ,kBAAR;EAAA,IAA4B,KAA5B,yBAA4B,KAA5B;EAAA,IAAmC,UAAnC,yBAAmC,UAAnC;;EACA,gBAA4B,QAAQ,CAA+B,SAA/B,CAApC;EAAA;EAAA,IAAO,MAAP;EAAA,IAAe,SAAf;;EAEA,IAAM,IAAI,GAAG,WAAW,0EACtB;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YACQ,kBADR,GAC6B,uBAAuB,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,CADpD;YAAA;YAAA,OAEwB,kBAAkB,CAAC,kBAAkB,CAAC,YAAD,CAAlB,OAAA,kBAAkB,QAAnB,CAF1C;;UAAA;YAEQ,OAFR;;YAGE,IAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,IAAb,EAAmB;cACX,OADW,GACF,OAAO,CAAC,IAAR,CAAa,MAAb,CAAoB,UAAC,eAAD,EAAkB,GAAlB,EAAyB;gBAC1D,IAAI;kBACF,OAAO,GAAG,CAAC,OAAJ,CAAY,WAAZ,OAA8B,QAAQ,CAAC,OAAT,CAAiB,WAAjB,EAA9B,gCACC,eADD,IACkB,QAAQ,CAAC,SAAT,CAAmB,QAAnB,CAA4B,GAA5B,CADlB,KAEH,eAFJ;gBAGD,CAJD,CAIE,OAAO,IAAP,EAAa;kBACb,OAAO,eAAP;gBACD;cACF,CARc,EAQZ,EARY,CADE;cAUjB,SAAS,CAAC,OAAD,CAAT;YACD;;UAdH;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CADsB,IAiBtB,CAAC,QAAD,EAAW,YAAX,EAAyB,OAAzB,EAAkC,OAAlC,CAjBsB,CAAxB;EAoBA,OAAO;IAAE,IAAI,EAAJ,IAAF;IAAQ,KAAK,EAAL,KAAR;IAAe,MAAM,EAAN,MAAf;IAAuB,UAAU,EAAV;EAAvB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function connectContractToSigner(contract, options, library) {\n    if (contract.signer) {\n        return contract;\n    }\n    if (options === null || options === void 0 ? void 0 : options.signer) {\n        return contract.connect(options.signer);\n    }\n    if (library === null || library === void 0 ? void 0 : library.getSigner()) {\n        return contract.connect(library.getSigner());\n    }\n    throw new TypeError('No signer available in contract, options or library');\n}\n/**\n * @public\n */\nexport function useContractFunction(contract, functionName, options) {\n    const { library, chainId } = useEthers();\n    const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options);\n    const [events, setEvents] = useState(undefined);\n    const send = useCallback(async (...args) => {\n        const contractWithSigner = connectContractToSigner(contract, options, library);\n        const receipt = await promiseTransaction(contractWithSigner[functionName](...args));\n        if (receipt === null || receipt === void 0 ? void 0 : receipt.logs) {\n            const events = receipt.logs.reduce((accumulatedLogs, log) => {\n                try {\n                    return log.address.toLowerCase() === contract.address.toLowerCase()\n                        ? [...accumulatedLogs, contract.interface.parseLog(log)]\n                        : accumulatedLogs;\n                }\n                catch (_err) {\n                    return accumulatedLogs;\n                }\n            }, []);\n            setEvents(events);\n        }\n    }, [contract, functionName, options, library]);\n    return { send, state, events, resetState };\n}\n//# sourceMappingURL=useContractFunction.js.map"]},"metadata":{},"sourceType":"module"}