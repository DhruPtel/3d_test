{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Contract } from '@ethersproject/contracts';\nvar ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])'];\n/**\n * @public\n */\n\nexport function multicall2(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address, blockNumber, requests) {\n    var _a, contract, results, state, i, _requests$i, _address, data, _results$i, success, value, stateForAddress;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            contract = new Contract(address, ABI, provider);\n            _context.next = 5;\n            return contract.tryAggregate(false, requests.map(function (_ref) {\n              var address = _ref.address,\n                  data = _ref.data;\n              return [address, data];\n            }), {\n              blockTag: blockNumber\n            });\n\n          case 5:\n            results = _context.sent;\n            state = {};\n\n            for (i = 0; i < requests.length; i++) {\n              _requests$i = requests[i], _address = _requests$i.address, data = _requests$i.data;\n              _results$i = _slicedToArray(results[i], 2), success = _results$i[0], value = _results$i[1];\n              stateForAddress = (_a = state[_address]) !== null && _a !== void 0 ? _a : {};\n              stateForAddress[data] = {\n                success: success,\n                value: value\n              };\n              state[_address] = stateForAddress;\n            }\n\n            return _context.abrupt(\"return\", state);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/multicall2.ts"],"names":[],"mappings":";;;AAAA,SAAS,QAAT,QAAyB,0BAAzB;AAKA,IAAM,GAAG,GAAG,CACV,yJADU,CAAZ;AAIA;;AAEG;;AACH,gBAAsB,UAAtB;EAAA;AAAA;;;0EAAO,iBACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,MAMD,QAAQ,CAAC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,iCAOI,EAPJ;;UAAA;YASC,QATD,GASY,IAAI,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,QAA3B,CATZ;YAAA;YAAA,OAUsC,QAAQ,CAAC,YAAT,CACzC,KADyC,EAEzC,QAAQ,CAAC,GAAT,CAAa;cAAA,IAAG,OAAH,QAAG,OAAH;cAAA,IAAY,IAAZ,QAAY,IAAZ;cAAA,OAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;YAAA,CAAb,CAFyC,EAGzC;cAAE,QAAQ,EAAE;YAAZ,CAHyC,CAVtC;;UAAA;YAUC,OAVD;YAeC,KAfD,GAeqB,EAfrB;;YAgBL,KAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;cAAA,cACd,QAAQ,CAAC,CAAD,CADM,EAChC,QADgC,eAChC,OADgC,EACvB,IADuB,eACvB,IADuB;cAAA,4BAEf,OAAO,CAAC,CAAD,CAFQ,MAEjC,OAFiC,kBAExB,KAFwB;cAGlC,eAHkC,GAGhB,CAAA,EAAA,GAAA,KAAK,CAAC,QAAD,CAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,EAHF;cAIxC,eAAe,CAAC,IAAD,CAAf,GAAwB;gBAAE,OAAO,EAAP,OAAF;gBAAW,KAAK,EAAL;cAAX,CAAxB;cACA,KAAK,CAAC,QAAD,CAAL,GAAiB,eAAjB;YACD;;YAtBI,iCAuBE,KAvBF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","sourceRoot":"","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nconst ABI = [\n    'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])',\n];\n/**\n * @public\n */\nexport async function multicall2(provider, address, blockNumber, requests) {\n    var _a;\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const results = await contract.tryAggregate(false, requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const [success, value] = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = { success, value };\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall2.js.map"]},"metadata":{},"sourceType":"module"}