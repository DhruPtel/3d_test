{"ast":null,"code":"import _slicedToArray from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * @public\n */\n\nexport function useLookupAddress() {\n  var _useEthers = useEthers(),\n      account = _useEthers.account,\n      library = _useEthers.library;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      ens = _useState2[0],\n      setEns = _useState2[1];\n\n  useEffect(function () {\n    var mounted = true;\n\n    if (account && library) {\n      library === null || library === void 0 ? void 0 : library.lookupAddress(account).then(function (name) {\n        if (mounted) {\n          setEns(name);\n        }\n      }).catch(function () {\n        return setEns(null);\n      });\n    }\n\n    return function () {\n      mounted = false;\n    };\n  }, [account, library]);\n  return ens;\n}","map":{"version":3,"sources":["../../../../src/hooks/useLookupAddress.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA;;AAEG;;AACH,OAAM,SAAU,gBAAV,GAA0B;EAC9B,iBAA6B,SAAS,EAAtC;EAAA,IAAQ,OAAR,cAAQ,OAAR;EAAA,IAAiB,OAAjB,cAAiB,OAAjB;;EACA,gBAAsB,QAAQ,EAA9B;EAAA;EAAA,IAAO,GAAP;EAAA,IAAY,MAAZ;;EAEA,SAAS,CAAC,YAAK;IACb,IAAI,OAAO,GAAG,IAAd;;IAEA,IAAI,OAAO,IAAI,OAAf,EAAwB;MACtB,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CACH,aADJ,CACkB,OADlB,EAEG,IAFH,CAEQ,UAAC,IAAD,EAAS;QACb,IAAI,OAAJ,EAAa;UACX,MAAM,CAAC,IAAD,CAAN;QACD;MACF,CANH,EAOG,KAPH,CAOS;QAAA,OAAM,MAAM,CAAC,IAAD,CAAZ;MAAA,CAPT,CAAA;IAQD;;IAED,OAAO,YAAK;MACV,OAAO,GAAG,KAAV;IACD,CAFD;EAGD,CAjBQ,EAiBN,CAAC,OAAD,EAAU,OAAV,CAjBM,CAAT;EAmBA,OAAO,GAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * @public\n */\nexport function useLookupAddress() {\n    const { account, library } = useEthers();\n    const [ens, setEns] = useState();\n    useEffect(() => {\n        let mounted = true;\n        if (account && library) {\n            library === null || library === void 0 ? void 0 : library.lookupAddress(account).then((name) => {\n                if (mounted) {\n                    setEns(name);\n                }\n            }).catch(() => setEns(null));\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [account, library]);\n    return ens;\n}\n//# sourceMappingURL=useLookupAddress.js.map"]},"metadata":{},"sourceType":"module"}