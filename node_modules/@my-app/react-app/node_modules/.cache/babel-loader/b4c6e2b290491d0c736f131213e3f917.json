{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useBlockNumber } from '../providers/blockNumber/blockNumber/context';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers } from '../providers/blockNumber/blockNumbers';\n/**\n * @public\n */\n\nexport function useGasPrice() {\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library;\n\n  var providers = useReadonlyNetworks();\n\n  var _blockNumber = useBlockNumber();\n\n  var blockNumbers = useBlockNumbers();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      gasPrice = _useState2[0],\n      setGasPrice = _useState2[1];\n\n  var chainId = queryParams.chainId;\n\n  var _useMemo = useMemo(function () {\n    return chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber];\n  }, [providers, library, blockNumbers, _blockNumber]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      provider = _useMemo2[0],\n      blockNumber = _useMemo2[1];\n\n  function updateGasPrice() {\n    return _updateGasPrice.apply(this, arguments);\n  }\n\n  function _updateGasPrice() {\n    _updateGasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setGasPrice;\n              _context.next = 3;\n              return provider === null || provider === void 0 ? void 0 : provider.getGasPrice();\n\n            case 3:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _updateGasPrice.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"sources":["../../../../src/hooks/useGasPrice.ts"],"names":[],"mappings":";;;AAAA,SAAS,cAAT,QAA+B,8CAA/B;AAEA,SAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,QAA6C,OAA7C;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,mBAAT,QAAoC,uCAApC;AACA,SAAS,eAAT,QAAgC,uCAAhC;AAGA;;AAEG;;AACH,OAAM,SAAU,WAAV,GAAmD;EAAA,IAA7B,WAA6B,uEAAF,EAAE;;EACvD,iBAAoB,SAAS,EAA7B;EAAA,IAAQ,OAAR,cAAQ,OAAR;;EACA,IAAM,SAAS,GAAG,mBAAmB,EAArC;;EACA,IAAM,YAAY,GAAG,cAAc,EAAnC;;EACA,IAAM,YAAY,GAAG,eAAe,EAApC;;EAEA,gBAAgC,QAAQ,EAAxC;EAAA;EAAA,IAAO,QAAP;EAAA,IAAiB,WAAjB;;EAEA,IAAQ,OAAR,GAAoB,WAApB,CAAQ,OAAR;;EAEA,eAAgC,OAAO,CACrC;IAAA,OAAO,OAAO,GAAG,CAAC,SAAS,CAAC,OAAD,CAAV,EAAqB,YAAY,CAAC,OAAD,CAAjC,CAAH,GAAiD,CAAC,OAAD,EAAU,YAAV,CAA/D;EAAA,CADqC,EAErC,CAAC,SAAD,EAAY,OAAZ,EAAqB,YAArB,EAAmC,YAAnC,CAFqC,CAAvC;EAAA;EAAA,IAAO,QAAP;EAAA,IAAiB,WAAjB;;EAVuD,SAexC,cAfwC;IAAA;EAAA;;EAAA;IAAA,6EAevD;MAAA;QAAA;UAAA;YAAA;cAAA,cACE,WADF;cAAA;cAAA,OACoB,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,WAAV,EADpB;;YAAA;cAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAfuD;IAAA;EAAA;;EAmBvD,SAAS,CAAC,YAAK;IACb,cAAc;EACf,CAFQ,EAEN,CAAC,QAAD,EAAW,WAAX,CAFM,CAAT;EAIA,OAAO,QAAP;AACD","sourceRoot":"","sourcesContent":["import { useBlockNumber } from '../providers/blockNumber/blockNumber/context';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers } from '../providers/blockNumber/blockNumbers';\n/**\n * @public\n */\nexport function useGasPrice(queryParams = {}) {\n    const { library } = useEthers();\n    const providers = useReadonlyNetworks();\n    const _blockNumber = useBlockNumber();\n    const blockNumbers = useBlockNumbers();\n    const [gasPrice, setGasPrice] = useState();\n    const { chainId } = queryParams;\n    const [provider, blockNumber] = useMemo(() => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]), [providers, library, blockNumbers, _blockNumber]);\n    async function updateGasPrice() {\n        setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));\n    }\n    useEffect(() => {\n        updateGasPrice();\n    }, [provider, blockNumber]);\n    return gasPrice;\n}\n//# sourceMappingURL=useGasPrice.js.map"]},"metadata":{},"sourceType":"module"}