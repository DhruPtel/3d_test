{"ast":null,"code":"import _slicedToArray from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { JsonRpcProvider, Provider } from '@ethersproject/providers';\nimport { useConfig } from '../../config';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\n\nvar getProviderFromConfig = function getProviderFromConfig(urlOrProviderOrProviderFunction) {\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n    return urlOrProviderOrProviderFunction;\n  }\n\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\n    return urlOrProviderOrProviderFunction();\n  }\n\n  return new JsonRpcProvider(urlOrProviderOrProviderFunction);\n};\n\nexport var getProvidersFromConfig = function getProvidersFromConfig(readOnlyUrls) {\n  return fromEntries(Object.entries(readOnlyUrls).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        chainId = _ref2[0],\n        urlOrProviderOrProviderFunction = _ref2[1];\n\n    return [chainId, getProviderFromConfig(urlOrProviderOrProviderFunction)];\n  }));\n};\nexport function ReadonlyNetworksProvider(_ref3) {\n  var _ref3$providerOverrid = _ref3.providerOverrides,\n      providerOverrides = _ref3$providerOverrid === void 0 ? {} : _ref3$providerOverrid,\n      children = _ref3.children;\n\n  var _useConfig = useConfig(),\n      _useConfig$readOnlyUr = _useConfig.readOnlyUrls,\n      readOnlyUrls = _useConfig$readOnlyUr === void 0 ? {} : _useConfig$readOnlyUr;\n\n  var _useState = useState(function () {\n    return Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      providers = _useState2[0],\n      setProviders = _useState2[1];\n\n  useEffect(function () {\n    setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  }, Object.entries(readOnlyUrls).flat());\n  return _jsx(ReadonlyNetworksContext.Provider, Object.assign({\n    value: providers\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"sources":["../../../../../../src/providers/network/readonlyNetworks/provider.tsx"],"names":[],"mappings":";;AAAA,SAAoB,SAApB,EAA+B,QAA/B,QAA+C,OAA/C;AACA,SAAS,eAAT,EAA0B,QAA1B,QAAwD,0BAAxD;AACA,SAAS,SAAT,QAA0B,cAA1B;AAEA,SAAS,uBAAT,QAAwC,WAAxC;AAEA,SAAS,WAAT,QAA4B,8BAA5B;;AAOA,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,+BAAD,EAAiF;EAC7G,IAAI,QAAQ,CAAC,UAAT,CAAoB,+BAApB,CAAJ,EAA0D;IACxD,OAAO,+BAAP;EACD;;EACD,IAAI,OAAO,+BAAP,KAA2C,UAA/C,EAA2D;IACzD,OAAO,+BAA+B,EAAtC;EACD;;EACD,OAAO,IAAI,eAAJ,CAAoB,+BAApB,CAAP;AACD,CARD;;AAUA,OAAO,IAAM,sBAAsB,GAAG,SAAzB,sBAAyB,CAAC,YAAD;EAAA,OACpC,WAAW,CACT,MAAM,CAAC,OAAP,CAAe,YAAf,EAA6B,GAA7B,CAAiC;IAAA;IAAA,IAAE,OAAF;IAAA,IAAW,+BAAX;;IAAA,OAAgD,CAC/E,OAD+E,EAE/E,qBAAqB,CAAC,+BAAD,CAF0D,CAAhD;EAAA,CAAjC,CADS,CADyB;AAAA,CAA/B;AAQP,OAAM,SAAU,wBAAV,QAA6F;EAAA,kCAAxD,iBAAwD;EAAA,IAAxD,iBAAwD,sCAApC,EAAoC;EAAA,IAAhC,QAAgC,SAAhC,QAAgC;;EACjG,iBAA8B,SAAS,EAAvC;EAAA,uCAAQ,YAAR;EAAA,IAAQ,YAAR,sCAAuB,EAAvB;;EACA,gBAAkC,QAAQ,CAAY;IAAA,OAAM,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACvD,sBAAsB,CAAC,YAAD,CADiC,CAAA,EAEvD,iBAFuD,CAAN;EAAA,CAAZ,CAA1C;EAAA;EAAA,IAAO,SAAP;EAAA,IAAkB,YAAlB;;EAKA,SAAS,CAAC,YAAK;IACb,YAAY,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,sBAAsB,CAAC,YAAD,CAA5B,CAAA,EAA+C,iBAA/C,CAAA,CAAZ;EACD,CAFQ,EAEN,MAAM,CAAC,OAAP,CAAe,YAAf,EAA6B,IAA7B,EAFM,CAAT;EAIA,OAAO,IAAA,CAAC,uBAAuB,CAAC,QAAzB,EAAiC,MAAA,CAAA,MAAA,CAAA;IAAC,KAAK,EAAE;EAAR,CAAA,EAAiB;IAAA,QAAA,EAAG;EAAH,CAAjB,CAAjC,CAAP;AACD","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { JsonRpcProvider, Provider } from '@ethersproject/providers';\nimport { useConfig } from '../../config';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\nconst getProviderFromConfig = (urlOrProviderOrProviderFunction) => {\n    if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n        return urlOrProviderOrProviderFunction;\n    }\n    if (typeof urlOrProviderOrProviderFunction === 'function') {\n        return urlOrProviderOrProviderFunction();\n    }\n    return new JsonRpcProvider(urlOrProviderOrProviderFunction);\n};\nexport const getProvidersFromConfig = (readOnlyUrls) => fromEntries(Object.entries(readOnlyUrls).map(([chainId, urlOrProviderOrProviderFunction]) => [\n    chainId,\n    getProviderFromConfig(urlOrProviderOrProviderFunction),\n]));\nexport function ReadonlyNetworksProvider({ providerOverrides = {}, children }) {\n    const { readOnlyUrls = {} } = useConfig();\n    const [providers, setProviders] = useState(() => (Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides)));\n    useEffect(() => {\n        setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n    }, Object.entries(readOnlyUrls).flat());\n    return _jsx(ReadonlyNetworksContext.Provider, Object.assign({ value: providers }, { children: children }));\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}