import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { Route53ServiceException as __BaseException } from "./Route53ServiceException";
export declare type AccountLimitType = "MAX_HEALTH_CHECKS_BY_OWNER" | "MAX_HOSTED_ZONES_BY_OWNER" | "MAX_REUSABLE_DELEGATION_SETS_BY_OWNER" | "MAX_TRAFFIC_POLICIES_BY_OWNER" | "MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER";

export interface AccountLimit {
    
    Type: AccountLimitType | string | undefined;
    
    Value: number | undefined;
}
export declare namespace AccountLimit {
    
    const filterSensitiveLog: (obj: AccountLimit) => any;
}
export interface ActivateKeySigningKeyRequest {
    
    HostedZoneId: string | undefined;
    
    Name: string | undefined;
}
export declare namespace ActivateKeySigningKeyRequest {
    
    const filterSensitiveLog: (obj: ActivateKeySigningKeyRequest) => any;
}
export declare type ChangeStatus = "INSYNC" | "PENDING";

export interface ChangeInfo {
    
    Id: string | undefined;
    
    Status: ChangeStatus | string | undefined;
    
    SubmittedAt: Date | undefined;
    
    Comment?: string;
}
export declare namespace ChangeInfo {
    
    const filterSensitiveLog: (obj: ChangeInfo) => any;
}
export interface ActivateKeySigningKeyResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace ActivateKeySigningKeyResponse {
    
    const filterSensitiveLog: (obj: ActivateKeySigningKeyResponse) => any;
}

export declare class ConcurrentModification extends __BaseException {
    readonly name: "ConcurrentModification";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ConcurrentModification, __BaseException>);
}

export declare class InvalidInput extends __BaseException {
    readonly name: "InvalidInput";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidInput, __BaseException>);
}

export declare class InvalidKeySigningKeyStatus extends __BaseException {
    readonly name: "InvalidKeySigningKeyStatus";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidKeySigningKeyStatus, __BaseException>);
}

export declare class InvalidKMSArn extends __BaseException {
    readonly name: "InvalidKMSArn";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidKMSArn, __BaseException>);
}

export declare class InvalidSigningStatus extends __BaseException {
    readonly name: "InvalidSigningStatus";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidSigningStatus, __BaseException>);
}

export declare class NoSuchKeySigningKey extends __BaseException {
    readonly name: "NoSuchKeySigningKey";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchKeySigningKey, __BaseException>);
}
export declare type CloudWatchRegion = "af-south-1" | "ap-east-1" | "ap-northeast-1" | "ap-northeast-2" | "ap-northeast-3" | "ap-south-1" | "ap-southeast-1" | "ap-southeast-2" | "ap-southeast-3" | "ca-central-1" | "cn-north-1" | "cn-northwest-1" | "eu-central-1" | "eu-north-1" | "eu-south-1" | "eu-west-1" | "eu-west-2" | "eu-west-3" | "me-south-1" | "sa-east-1" | "us-east-1" | "us-east-2" | "us-gov-east-1" | "us-gov-west-1" | "us-iso-east-1" | "us-iso-west-1" | "us-isob-east-1" | "us-west-1" | "us-west-2";

export interface AlarmIdentifier {
    
    Region: CloudWatchRegion | string | undefined;
    
    Name: string | undefined;
}
export declare namespace AlarmIdentifier {
    
    const filterSensitiveLog: (obj: AlarmIdentifier) => any;
}

export interface AliasTarget {
    
    HostedZoneId: string | undefined;
    
    DNSName: string | undefined;
    
    EvaluateTargetHealth: boolean | undefined;
}
export declare namespace AliasTarget {
    
    const filterSensitiveLog: (obj: AliasTarget) => any;
}
export declare type VPCRegion = "af-south-1" | "ap-east-1" | "ap-northeast-1" | "ap-northeast-2" | "ap-northeast-3" | "ap-south-1" | "ap-southeast-1" | "ap-southeast-2" | "ap-southeast-3" | "ca-central-1" | "cn-north-1" | "eu-central-1" | "eu-north-1" | "eu-south-1" | "eu-west-1" | "eu-west-2" | "eu-west-3" | "me-south-1" | "sa-east-1" | "us-east-1" | "us-east-2" | "us-gov-east-1" | "us-gov-west-1" | "us-iso-east-1" | "us-iso-west-1" | "us-isob-east-1" | "us-west-1" | "us-west-2";

export interface VPC {
    
    VPCRegion?: VPCRegion | string;
    
    VPCId?: string;
}
export declare namespace VPC {
    
    const filterSensitiveLog: (obj: VPC) => any;
}

export interface AssociateVPCWithHostedZoneRequest {
    
    HostedZoneId: string | undefined;
    
    VPC: VPC | undefined;
    
    Comment?: string;
}
export declare namespace AssociateVPCWithHostedZoneRequest {
    
    const filterSensitiveLog: (obj: AssociateVPCWithHostedZoneRequest) => any;
}

export interface AssociateVPCWithHostedZoneResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace AssociateVPCWithHostedZoneResponse {
    
    const filterSensitiveLog: (obj: AssociateVPCWithHostedZoneResponse) => any;
}

export declare class ConflictingDomainExists extends __BaseException {
    readonly name: "ConflictingDomainExists";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ConflictingDomainExists, __BaseException>);
}

export declare class InvalidVPCId extends __BaseException {
    readonly name: "InvalidVPCId";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidVPCId, __BaseException>);
}

export declare class LimitsExceeded extends __BaseException {
    readonly name: "LimitsExceeded";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LimitsExceeded, __BaseException>);
}

export declare class NoSuchHostedZone extends __BaseException {
    readonly name: "NoSuchHostedZone";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchHostedZone, __BaseException>);
}

export declare class NotAuthorizedException extends __BaseException {
    readonly name: "NotAuthorizedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>);
}

export declare class PriorRequestNotComplete extends __BaseException {
    readonly name: "PriorRequestNotComplete";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<PriorRequestNotComplete, __BaseException>);
}

export declare class PublicZoneVPCAssociation extends __BaseException {
    readonly name: "PublicZoneVPCAssociation";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<PublicZoneVPCAssociation, __BaseException>);
}
export declare enum CidrCollectionChangeAction {
    DELETE_IF_EXISTS = "DELETE_IF_EXISTS",
    PUT = "PUT"
}

export interface CidrCollectionChange {
    
    LocationName: string | undefined;
    
    Action: CidrCollectionChangeAction | string | undefined;
    
    CidrList: string[] | undefined;
}
export declare namespace CidrCollectionChange {
    
    const filterSensitiveLog: (obj: CidrCollectionChange) => any;
}
export interface ChangeCidrCollectionRequest {
    
    Id: string | undefined;
    
    CollectionVersion?: number;
    
    Changes: CidrCollectionChange[] | undefined;
}
export declare namespace ChangeCidrCollectionRequest {
    
    const filterSensitiveLog: (obj: ChangeCidrCollectionRequest) => any;
}
export interface ChangeCidrCollectionResponse {
    
    Id: string | undefined;
}
export declare namespace ChangeCidrCollectionResponse {
    
    const filterSensitiveLog: (obj: ChangeCidrCollectionResponse) => any;
}

export declare class CidrBlockInUseException extends __BaseException {
    readonly name: "CidrBlockInUseException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<CidrBlockInUseException, __BaseException>);
}

export declare class CidrCollectionVersionMismatchException extends __BaseException {
    readonly name: "CidrCollectionVersionMismatchException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<CidrCollectionVersionMismatchException, __BaseException>);
}

export declare class NoSuchCidrCollectionException extends __BaseException {
    readonly name: "NoSuchCidrCollectionException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<NoSuchCidrCollectionException, __BaseException>);
}
export declare type ChangeAction = "CREATE" | "DELETE" | "UPSERT";

export interface CidrRoutingConfig {
    
    CollectionId: string | undefined;
    
    LocationName: string | undefined;
}
export declare namespace CidrRoutingConfig {
    
    const filterSensitiveLog: (obj: CidrRoutingConfig) => any;
}
export declare type ResourceRecordSetFailover = "PRIMARY" | "SECONDARY";

export interface GeoLocation {
    
    ContinentCode?: string;
    
    CountryCode?: string;
    
    SubdivisionCode?: string;
}
export declare namespace GeoLocation {
    
    const filterSensitiveLog: (obj: GeoLocation) => any;
}
export declare type ResourceRecordSetRegion = "af-south-1" | "ap-east-1" | "ap-northeast-1" | "ap-northeast-2" | "ap-northeast-3" | "ap-south-1" | "ap-southeast-1" | "ap-southeast-2" | "ap-southeast-3" | "ca-central-1" | "cn-north-1" | "cn-northwest-1" | "eu-central-1" | "eu-north-1" | "eu-south-1" | "eu-west-1" | "eu-west-2" | "eu-west-3" | "me-south-1" | "sa-east-1" | "us-east-1" | "us-east-2" | "us-west-1" | "us-west-2";

export interface ResourceRecord {
    
    Value: string | undefined;
}
export declare namespace ResourceRecord {
    
    const filterSensitiveLog: (obj: ResourceRecord) => any;
}
export declare type RRType = "A" | "AAAA" | "CAA" | "CNAME" | "DS" | "MX" | "NAPTR" | "NS" | "PTR" | "SOA" | "SPF" | "SRV" | "TXT";

export interface ResourceRecordSet {
    
    Name: string | undefined;
    
    Type: RRType | string | undefined;
    
    SetIdentifier?: string;
    
    Weight?: number;
    
    Region?: ResourceRecordSetRegion | string;
    
    GeoLocation?: GeoLocation;
    
    Failover?: ResourceRecordSetFailover | string;
    
    MultiValueAnswer?: boolean;
    
    TTL?: number;
    
    ResourceRecords?: ResourceRecord[];
    
    AliasTarget?: AliasTarget;
    
    HealthCheckId?: string;
    
    TrafficPolicyInstanceId?: string;
    
    CidrRoutingConfig?: CidrRoutingConfig;
}
export declare namespace ResourceRecordSet {
    
    const filterSensitiveLog: (obj: ResourceRecordSet) => any;
}

export interface Change {
    
    Action: ChangeAction | string | undefined;
    
    ResourceRecordSet: ResourceRecordSet | undefined;
}
export declare namespace Change {
    
    const filterSensitiveLog: (obj: Change) => any;
}

export interface ChangeBatch {
    
    Comment?: string;
    
    Changes: Change[] | undefined;
}
export declare namespace ChangeBatch {
    
    const filterSensitiveLog: (obj: ChangeBatch) => any;
}

export interface ChangeResourceRecordSetsRequest {
    
    HostedZoneId: string | undefined;
    
    ChangeBatch: ChangeBatch | undefined;
}
export declare namespace ChangeResourceRecordSetsRequest {
    
    const filterSensitiveLog: (obj: ChangeResourceRecordSetsRequest) => any;
}

export interface ChangeResourceRecordSetsResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace ChangeResourceRecordSetsResponse {
    
    const filterSensitiveLog: (obj: ChangeResourceRecordSetsResponse) => any;
}

export declare class InvalidChangeBatch extends __BaseException {
    readonly name: "InvalidChangeBatch";
    readonly $fault: "client";
    
    messages?: string[];
    
    constructor(opts: __ExceptionOptionType<InvalidChangeBatch, __BaseException>);
}

export declare class NoSuchHealthCheck extends __BaseException {
    readonly name: "NoSuchHealthCheck";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchHealthCheck, __BaseException>);
}

export interface Tag {
    
    Key?: string;
    
    Value?: string;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}
export declare type TagResourceType = "healthcheck" | "hostedzone";

export interface ChangeTagsForResourceRequest {
    
    ResourceType: TagResourceType | string | undefined;
    
    ResourceId: string | undefined;
    
    AddTags?: Tag[];
    
    RemoveTagKeys?: string[];
}
export declare namespace ChangeTagsForResourceRequest {
    
    const filterSensitiveLog: (obj: ChangeTagsForResourceRequest) => any;
}

export interface ChangeTagsForResourceResponse {
}
export declare namespace ChangeTagsForResourceResponse {
    
    const filterSensitiveLog: (obj: ChangeTagsForResourceResponse) => any;
}

export declare class ThrottlingException extends __BaseException {
    readonly name: "ThrottlingException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
}

export declare class CidrCollectionAlreadyExistsException extends __BaseException {
    readonly name: "CidrCollectionAlreadyExistsException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<CidrCollectionAlreadyExistsException, __BaseException>);
}
export interface CreateCidrCollectionRequest {
    
    Name: string | undefined;
    
    CallerReference: string | undefined;
}
export declare namespace CreateCidrCollectionRequest {
    
    const filterSensitiveLog: (obj: CreateCidrCollectionRequest) => any;
}

export interface CidrCollection {
    
    Arn?: string;
    
    Id?: string;
    
    Name?: string;
    
    Version?: number;
}
export declare namespace CidrCollection {
    
    const filterSensitiveLog: (obj: CidrCollection) => any;
}
export interface CreateCidrCollectionResponse {
    
    Collection?: CidrCollection;
    
    Location?: string;
}
export declare namespace CreateCidrCollectionResponse {
    
    const filterSensitiveLog: (obj: CreateCidrCollectionResponse) => any;
}
export declare type InsufficientDataHealthStatus = "Healthy" | "LastKnownStatus" | "Unhealthy";
export declare type HealthCheckRegion = "ap-northeast-1" | "ap-southeast-1" | "ap-southeast-2" | "eu-west-1" | "sa-east-1" | "us-east-1" | "us-west-1" | "us-west-2";
export declare enum HealthCheckType {
    CALCULATED = "CALCULATED",
    CLOUDWATCH_METRIC = "CLOUDWATCH_METRIC",
    HTTP = "HTTP",
    HTTPS = "HTTPS",
    HTTPS_STR_MATCH = "HTTPS_STR_MATCH",
    HTTP_STR_MATCH = "HTTP_STR_MATCH",
    RECOVERY_CONTROL = "RECOVERY_CONTROL",
    TCP = "TCP"
}

export interface HealthCheckConfig {
    
    IPAddress?: string;
    
    Port?: number;
    
    Type: HealthCheckType | string | undefined;
    
    ResourcePath?: string;
    
    FullyQualifiedDomainName?: string;
    
    SearchString?: string;
    
    RequestInterval?: number;
    
    FailureThreshold?: number;
    
    MeasureLatency?: boolean;
    
    Inverted?: boolean;
    
    Disabled?: boolean;
    
    HealthThreshold?: number;
    
    ChildHealthChecks?: string[];
    
    EnableSNI?: boolean;
    
    Regions?: (HealthCheckRegion | string)[];
    
    AlarmIdentifier?: AlarmIdentifier;
    
    InsufficientDataHealthStatus?: InsufficientDataHealthStatus | string;
    
    RoutingControlArn?: string;
}
export declare namespace HealthCheckConfig {
    
    const filterSensitiveLog: (obj: HealthCheckConfig) => any;
}

export interface CreateHealthCheckRequest {
    
    CallerReference: string | undefined;
    
    HealthCheckConfig: HealthCheckConfig | undefined;
}
export declare namespace CreateHealthCheckRequest {
    
    const filterSensitiveLog: (obj: CreateHealthCheckRequest) => any;
}
export declare type ComparisonOperator = "GreaterThanOrEqualToThreshold" | "GreaterThanThreshold" | "LessThanOrEqualToThreshold" | "LessThanThreshold";

export interface Dimension {
    
    Name: string | undefined;
    
    Value: string | undefined;
}
export declare namespace Dimension {
    
    const filterSensitiveLog: (obj: Dimension) => any;
}
export declare type Statistic = "Average" | "Maximum" | "Minimum" | "SampleCount" | "Sum";

export interface CloudWatchAlarmConfiguration {
    
    EvaluationPeriods: number | undefined;
    
    Threshold: number | undefined;
    
    ComparisonOperator: ComparisonOperator | string | undefined;
    
    Period: number | undefined;
    
    MetricName: string | undefined;
    
    Namespace: string | undefined;
    
    Statistic: Statistic | string | undefined;
    
    Dimensions?: Dimension[];
}
export declare namespace CloudWatchAlarmConfiguration {
    
    const filterSensitiveLog: (obj: CloudWatchAlarmConfiguration) => any;
}

export interface LinkedService {
    
    ServicePrincipal?: string;
    
    Description?: string;
}
export declare namespace LinkedService {
    
    const filterSensitiveLog: (obj: LinkedService) => any;
}

export interface HealthCheck {
    
    Id: string | undefined;
    
    CallerReference: string | undefined;
    
    LinkedService?: LinkedService;
    
    HealthCheckConfig: HealthCheckConfig | undefined;
    
    HealthCheckVersion: number | undefined;
    
    CloudWatchAlarmConfiguration?: CloudWatchAlarmConfiguration;
}
export declare namespace HealthCheck {
    
    const filterSensitiveLog: (obj: HealthCheck) => any;
}

export interface CreateHealthCheckResponse {
    
    HealthCheck: HealthCheck | undefined;
    
    Location: string | undefined;
}
export declare namespace CreateHealthCheckResponse {
    
    const filterSensitiveLog: (obj: CreateHealthCheckResponse) => any;
}

export declare class HealthCheckAlreadyExists extends __BaseException {
    readonly name: "HealthCheckAlreadyExists";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<HealthCheckAlreadyExists, __BaseException>);
}

export declare class TooManyHealthChecks extends __BaseException {
    readonly name: "TooManyHealthChecks";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyHealthChecks, __BaseException>);
}

export interface HostedZoneConfig {
    
    Comment?: string;
    
    PrivateZone?: boolean;
}
export declare namespace HostedZoneConfig {
    
    const filterSensitiveLog: (obj: HostedZoneConfig) => any;
}

export interface CreateHostedZoneRequest {
    
    Name: string | undefined;
    
    VPC?: VPC;
    
    CallerReference: string | undefined;
    
    HostedZoneConfig?: HostedZoneConfig;
    
    DelegationSetId?: string;
}
export declare namespace CreateHostedZoneRequest {
    
    const filterSensitiveLog: (obj: CreateHostedZoneRequest) => any;
}

export interface DelegationSet {
    
    Id?: string;
    
    CallerReference?: string;
    
    NameServers: string[] | undefined;
}
export declare namespace DelegationSet {
    
    const filterSensitiveLog: (obj: DelegationSet) => any;
}

export interface HostedZone {
    
    Id: string | undefined;
    
    Name: string | undefined;
    
    CallerReference: string | undefined;
    
    Config?: HostedZoneConfig;
    
    ResourceRecordSetCount?: number;
    
    LinkedService?: LinkedService;
}
export declare namespace HostedZone {
    
    const filterSensitiveLog: (obj: HostedZone) => any;
}

export interface CreateHostedZoneResponse {
    
    HostedZone: HostedZone | undefined;
    
    ChangeInfo: ChangeInfo | undefined;
    
    DelegationSet: DelegationSet | undefined;
    
    VPC?: VPC;
    
    Location: string | undefined;
}
export declare namespace CreateHostedZoneResponse {
    
    const filterSensitiveLog: (obj: CreateHostedZoneResponse) => any;
}

export declare class DelegationSetNotAvailable extends __BaseException {
    readonly name: "DelegationSetNotAvailable";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DelegationSetNotAvailable, __BaseException>);
}

export declare class DelegationSetNotReusable extends __BaseException {
    readonly name: "DelegationSetNotReusable";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DelegationSetNotReusable, __BaseException>);
}

export declare class HostedZoneAlreadyExists extends __BaseException {
    readonly name: "HostedZoneAlreadyExists";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<HostedZoneAlreadyExists, __BaseException>);
}

export declare class InvalidDomainName extends __BaseException {
    readonly name: "InvalidDomainName";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidDomainName, __BaseException>);
}

export declare class NoSuchDelegationSet extends __BaseException {
    readonly name: "NoSuchDelegationSet";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchDelegationSet, __BaseException>);
}

export declare class TooManyHostedZones extends __BaseException {
    readonly name: "TooManyHostedZones";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyHostedZones, __BaseException>);
}
export interface CreateKeySigningKeyRequest {
    
    CallerReference: string | undefined;
    
    HostedZoneId: string | undefined;
    
    KeyManagementServiceArn: string | undefined;
    
    Name: string | undefined;
    
    Status: string | undefined;
}
export declare namespace CreateKeySigningKeyRequest {
    
    const filterSensitiveLog: (obj: CreateKeySigningKeyRequest) => any;
}

export interface KeySigningKey {
    
    Name?: string;
    
    KmsArn?: string;
    
    Flag?: number;
    
    SigningAlgorithmMnemonic?: string;
    
    SigningAlgorithmType?: number;
    
    DigestAlgorithmMnemonic?: string;
    
    DigestAlgorithmType?: number;
    
    KeyTag?: number;
    
    DigestValue?: string;
    
    PublicKey?: string;
    
    DSRecord?: string;
    
    DNSKEYRecord?: string;
    
    Status?: string;
    
    StatusMessage?: string;
    
    CreatedDate?: Date;
    
    LastModifiedDate?: Date;
}
export declare namespace KeySigningKey {
    
    const filterSensitiveLog: (obj: KeySigningKey) => any;
}
export interface CreateKeySigningKeyResponse {
    
    ChangeInfo: ChangeInfo | undefined;
    
    KeySigningKey: KeySigningKey | undefined;
    
    Location: string | undefined;
}
export declare namespace CreateKeySigningKeyResponse {
    
    const filterSensitiveLog: (obj: CreateKeySigningKeyResponse) => any;
}

export declare class InvalidArgument extends __BaseException {
    readonly name: "InvalidArgument";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidArgument, __BaseException>);
}

export declare class InvalidKeySigningKeyName extends __BaseException {
    readonly name: "InvalidKeySigningKeyName";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidKeySigningKeyName, __BaseException>);
}

export declare class KeySigningKeyAlreadyExists extends __BaseException {
    readonly name: "KeySigningKeyAlreadyExists";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<KeySigningKeyAlreadyExists, __BaseException>);
}

export declare class TooManyKeySigningKeys extends __BaseException {
    readonly name: "TooManyKeySigningKeys";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyKeySigningKeys, __BaseException>);
}
export interface CreateQueryLoggingConfigRequest {
    
    HostedZoneId: string | undefined;
    
    CloudWatchLogsLogGroupArn: string | undefined;
}
export declare namespace CreateQueryLoggingConfigRequest {
    
    const filterSensitiveLog: (obj: CreateQueryLoggingConfigRequest) => any;
}

export interface QueryLoggingConfig {
    
    Id: string | undefined;
    
    HostedZoneId: string | undefined;
    
    CloudWatchLogsLogGroupArn: string | undefined;
}
export declare namespace QueryLoggingConfig {
    
    const filterSensitiveLog: (obj: QueryLoggingConfig) => any;
}
export interface CreateQueryLoggingConfigResponse {
    
    QueryLoggingConfig: QueryLoggingConfig | undefined;
    
    Location: string | undefined;
}
export declare namespace CreateQueryLoggingConfigResponse {
    
    const filterSensitiveLog: (obj: CreateQueryLoggingConfigResponse) => any;
}

export declare class InsufficientCloudWatchLogsResourcePolicy extends __BaseException {
    readonly name: "InsufficientCloudWatchLogsResourcePolicy";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InsufficientCloudWatchLogsResourcePolicy, __BaseException>);
}

export declare class NoSuchCloudWatchLogsLogGroup extends __BaseException {
    readonly name: "NoSuchCloudWatchLogsLogGroup";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchCloudWatchLogsLogGroup, __BaseException>);
}

export declare class QueryLoggingConfigAlreadyExists extends __BaseException {
    readonly name: "QueryLoggingConfigAlreadyExists";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<QueryLoggingConfigAlreadyExists, __BaseException>);
}
export interface CreateReusableDelegationSetRequest {
    
    CallerReference: string | undefined;
    
    HostedZoneId?: string;
}
export declare namespace CreateReusableDelegationSetRequest {
    
    const filterSensitiveLog: (obj: CreateReusableDelegationSetRequest) => any;
}
export interface CreateReusableDelegationSetResponse {
    
    DelegationSet: DelegationSet | undefined;
    
    Location: string | undefined;
}
export declare namespace CreateReusableDelegationSetResponse {
    
    const filterSensitiveLog: (obj: CreateReusableDelegationSetResponse) => any;
}

export declare class DelegationSetAlreadyCreated extends __BaseException {
    readonly name: "DelegationSetAlreadyCreated";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DelegationSetAlreadyCreated, __BaseException>);
}

export declare class DelegationSetAlreadyReusable extends __BaseException {
    readonly name: "DelegationSetAlreadyReusable";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DelegationSetAlreadyReusable, __BaseException>);
}

export declare class HostedZoneNotFound extends __BaseException {
    readonly name: "HostedZoneNotFound";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<HostedZoneNotFound, __BaseException>);
}

export interface CreateTrafficPolicyRequest {
    
    Name: string | undefined;
    
    Document: string | undefined;
    
    Comment?: string;
}
export declare namespace CreateTrafficPolicyRequest {
    
    const filterSensitiveLog: (obj: CreateTrafficPolicyRequest) => any;
}

export interface TrafficPolicy {
    
    Id: string | undefined;
    
    Version: number | undefined;
    
    Name: string | undefined;
    
    Type: RRType | string | undefined;
    
    Document: string | undefined;
    
    Comment?: string;
}
export declare namespace TrafficPolicy {
    
    const filterSensitiveLog: (obj: TrafficPolicy) => any;
}

export interface CreateTrafficPolicyResponse {
    
    TrafficPolicy: TrafficPolicy | undefined;
    
    Location: string | undefined;
}
export declare namespace CreateTrafficPolicyResponse {
    
    const filterSensitiveLog: (obj: CreateTrafficPolicyResponse) => any;
}

export declare class InvalidTrafficPolicyDocument extends __BaseException {
    readonly name: "InvalidTrafficPolicyDocument";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidTrafficPolicyDocument, __BaseException>);
}

export declare class TooManyTrafficPolicies extends __BaseException {
    readonly name: "TooManyTrafficPolicies";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyTrafficPolicies, __BaseException>);
}

export declare class TrafficPolicyAlreadyExists extends __BaseException {
    readonly name: "TrafficPolicyAlreadyExists";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TrafficPolicyAlreadyExists, __BaseException>);
}

export interface CreateTrafficPolicyInstanceRequest {
    
    HostedZoneId: string | undefined;
    
    Name: string | undefined;
    
    TTL: number | undefined;
    
    TrafficPolicyId: string | undefined;
    
    TrafficPolicyVersion: number | undefined;
}
export declare namespace CreateTrafficPolicyInstanceRequest {
    
    const filterSensitiveLog: (obj: CreateTrafficPolicyInstanceRequest) => any;
}

export interface TrafficPolicyInstance {
    
    Id: string | undefined;
    
    HostedZoneId: string | undefined;
    
    Name: string | undefined;
    
    TTL: number | undefined;
    
    State: string | undefined;
    
    Message: string | undefined;
    
    TrafficPolicyId: string | undefined;
    
    TrafficPolicyVersion: number | undefined;
    
    TrafficPolicyType: RRType | string | undefined;
}
export declare namespace TrafficPolicyInstance {
    
    const filterSensitiveLog: (obj: TrafficPolicyInstance) => any;
}

export interface CreateTrafficPolicyInstanceResponse {
    
    TrafficPolicyInstance: TrafficPolicyInstance | undefined;
    
    Location: string | undefined;
}
export declare namespace CreateTrafficPolicyInstanceResponse {
    
    const filterSensitiveLog: (obj: CreateTrafficPolicyInstanceResponse) => any;
}

export declare class NoSuchTrafficPolicy extends __BaseException {
    readonly name: "NoSuchTrafficPolicy";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchTrafficPolicy, __BaseException>);
}

export declare class TooManyTrafficPolicyInstances extends __BaseException {
    readonly name: "TooManyTrafficPolicyInstances";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyTrafficPolicyInstances, __BaseException>);
}

export declare class TrafficPolicyInstanceAlreadyExists extends __BaseException {
    readonly name: "TrafficPolicyInstanceAlreadyExists";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TrafficPolicyInstanceAlreadyExists, __BaseException>);
}

export interface CreateTrafficPolicyVersionRequest {
    
    Id: string | undefined;
    
    Document: string | undefined;
    
    Comment?: string;
}
export declare namespace CreateTrafficPolicyVersionRequest {
    
    const filterSensitiveLog: (obj: CreateTrafficPolicyVersionRequest) => any;
}

export interface CreateTrafficPolicyVersionResponse {
    
    TrafficPolicy: TrafficPolicy | undefined;
    
    Location: string | undefined;
}
export declare namespace CreateTrafficPolicyVersionResponse {
    
    const filterSensitiveLog: (obj: CreateTrafficPolicyVersionResponse) => any;
}

export declare class TooManyTrafficPolicyVersionsForCurrentPolicy extends __BaseException {
    readonly name: "TooManyTrafficPolicyVersionsForCurrentPolicy";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyTrafficPolicyVersionsForCurrentPolicy, __BaseException>);
}

export interface CreateVPCAssociationAuthorizationRequest {
    
    HostedZoneId: string | undefined;
    
    VPC: VPC | undefined;
}
export declare namespace CreateVPCAssociationAuthorizationRequest {
    
    const filterSensitiveLog: (obj: CreateVPCAssociationAuthorizationRequest) => any;
}

export interface CreateVPCAssociationAuthorizationResponse {
    
    HostedZoneId: string | undefined;
    
    VPC: VPC | undefined;
}
export declare namespace CreateVPCAssociationAuthorizationResponse {
    
    const filterSensitiveLog: (obj: CreateVPCAssociationAuthorizationResponse) => any;
}

export declare class TooManyVPCAssociationAuthorizations extends __BaseException {
    readonly name: "TooManyVPCAssociationAuthorizations";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyVPCAssociationAuthorizations, __BaseException>);
}
export interface DeactivateKeySigningKeyRequest {
    
    HostedZoneId: string | undefined;
    
    Name: string | undefined;
}
export declare namespace DeactivateKeySigningKeyRequest {
    
    const filterSensitiveLog: (obj: DeactivateKeySigningKeyRequest) => any;
}
export interface DeactivateKeySigningKeyResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace DeactivateKeySigningKeyResponse {
    
    const filterSensitiveLog: (obj: DeactivateKeySigningKeyResponse) => any;
}

export declare class KeySigningKeyInParentDSRecord extends __BaseException {
    readonly name: "KeySigningKeyInParentDSRecord";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<KeySigningKeyInParentDSRecord, __BaseException>);
}

export declare class KeySigningKeyInUse extends __BaseException {
    readonly name: "KeySigningKeyInUse";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<KeySigningKeyInUse, __BaseException>);
}

export declare class CidrCollectionInUseException extends __BaseException {
    readonly name: "CidrCollectionInUseException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<CidrCollectionInUseException, __BaseException>);
}
export interface DeleteCidrCollectionRequest {
    
    Id: string | undefined;
}
export declare namespace DeleteCidrCollectionRequest {
    
    const filterSensitiveLog: (obj: DeleteCidrCollectionRequest) => any;
}
export interface DeleteCidrCollectionResponse {
}
export declare namespace DeleteCidrCollectionResponse {
    
    const filterSensitiveLog: (obj: DeleteCidrCollectionResponse) => any;
}

export interface DeleteHealthCheckRequest {
    
    HealthCheckId: string | undefined;
}
export declare namespace DeleteHealthCheckRequest {
    
    const filterSensitiveLog: (obj: DeleteHealthCheckRequest) => any;
}

export interface DeleteHealthCheckResponse {
}
export declare namespace DeleteHealthCheckResponse {
    
    const filterSensitiveLog: (obj: DeleteHealthCheckResponse) => any;
}

export declare class HealthCheckInUse extends __BaseException {
    readonly name: "HealthCheckInUse";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<HealthCheckInUse, __BaseException>);
}

export interface DeleteHostedZoneRequest {
    
    Id: string | undefined;
}
export declare namespace DeleteHostedZoneRequest {
    
    const filterSensitiveLog: (obj: DeleteHostedZoneRequest) => any;
}

export interface DeleteHostedZoneResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace DeleteHostedZoneResponse {
    
    const filterSensitiveLog: (obj: DeleteHostedZoneResponse) => any;
}

export declare class HostedZoneNotEmpty extends __BaseException {
    readonly name: "HostedZoneNotEmpty";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<HostedZoneNotEmpty, __BaseException>);
}
export interface DeleteKeySigningKeyRequest {
    
    HostedZoneId: string | undefined;
    
    Name: string | undefined;
}
export declare namespace DeleteKeySigningKeyRequest {
    
    const filterSensitiveLog: (obj: DeleteKeySigningKeyRequest) => any;
}
export interface DeleteKeySigningKeyResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace DeleteKeySigningKeyResponse {
    
    const filterSensitiveLog: (obj: DeleteKeySigningKeyResponse) => any;
}
export interface DeleteQueryLoggingConfigRequest {
    
    Id: string | undefined;
}
export declare namespace DeleteQueryLoggingConfigRequest {
    
    const filterSensitiveLog: (obj: DeleteQueryLoggingConfigRequest) => any;
}
export interface DeleteQueryLoggingConfigResponse {
}
export declare namespace DeleteQueryLoggingConfigResponse {
    
    const filterSensitiveLog: (obj: DeleteQueryLoggingConfigResponse) => any;
}

export declare class NoSuchQueryLoggingConfig extends __BaseException {
    readonly name: "NoSuchQueryLoggingConfig";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchQueryLoggingConfig, __BaseException>);
}

export declare class DelegationSetInUse extends __BaseException {
    readonly name: "DelegationSetInUse";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DelegationSetInUse, __BaseException>);
}

export interface DeleteReusableDelegationSetRequest {
    
    Id: string | undefined;
}
export declare namespace DeleteReusableDelegationSetRequest {
    
    const filterSensitiveLog: (obj: DeleteReusableDelegationSetRequest) => any;
}

export interface DeleteReusableDelegationSetResponse {
}
export declare namespace DeleteReusableDelegationSetResponse {
    
    const filterSensitiveLog: (obj: DeleteReusableDelegationSetResponse) => any;
}

export interface DeleteTrafficPolicyRequest {
    
    Id: string | undefined;
    
    Version: number | undefined;
}
export declare namespace DeleteTrafficPolicyRequest {
    
    const filterSensitiveLog: (obj: DeleteTrafficPolicyRequest) => any;
}

export interface DeleteTrafficPolicyResponse {
}
export declare namespace DeleteTrafficPolicyResponse {
    
    const filterSensitiveLog: (obj: DeleteTrafficPolicyResponse) => any;
}

export declare class TrafficPolicyInUse extends __BaseException {
    readonly name: "TrafficPolicyInUse";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TrafficPolicyInUse, __BaseException>);
}

export interface DeleteTrafficPolicyInstanceRequest {
    
    Id: string | undefined;
}
export declare namespace DeleteTrafficPolicyInstanceRequest {
    
    const filterSensitiveLog: (obj: DeleteTrafficPolicyInstanceRequest) => any;
}

export interface DeleteTrafficPolicyInstanceResponse {
}
export declare namespace DeleteTrafficPolicyInstanceResponse {
    
    const filterSensitiveLog: (obj: DeleteTrafficPolicyInstanceResponse) => any;
}

export declare class NoSuchTrafficPolicyInstance extends __BaseException {
    readonly name: "NoSuchTrafficPolicyInstance";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchTrafficPolicyInstance, __BaseException>);
}

export interface DeleteVPCAssociationAuthorizationRequest {
    
    HostedZoneId: string | undefined;
    
    VPC: VPC | undefined;
}
export declare namespace DeleteVPCAssociationAuthorizationRequest {
    
    const filterSensitiveLog: (obj: DeleteVPCAssociationAuthorizationRequest) => any;
}

export interface DeleteVPCAssociationAuthorizationResponse {
}
export declare namespace DeleteVPCAssociationAuthorizationResponse {
    
    const filterSensitiveLog: (obj: DeleteVPCAssociationAuthorizationResponse) => any;
}

export declare class VPCAssociationAuthorizationNotFound extends __BaseException {
    readonly name: "VPCAssociationAuthorizationNotFound";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<VPCAssociationAuthorizationNotFound, __BaseException>);
}
export interface DisableHostedZoneDNSSECRequest {
    
    HostedZoneId: string | undefined;
}
export declare namespace DisableHostedZoneDNSSECRequest {
    
    const filterSensitiveLog: (obj: DisableHostedZoneDNSSECRequest) => any;
}
export interface DisableHostedZoneDNSSECResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace DisableHostedZoneDNSSECResponse {
    
    const filterSensitiveLog: (obj: DisableHostedZoneDNSSECResponse) => any;
}

export declare class DNSSECNotFound extends __BaseException {
    readonly name: "DNSSECNotFound";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DNSSECNotFound, __BaseException>);
}

export interface DisassociateVPCFromHostedZoneRequest {
    
    HostedZoneId: string | undefined;
    
    VPC: VPC | undefined;
    
    Comment?: string;
}
export declare namespace DisassociateVPCFromHostedZoneRequest {
    
    const filterSensitiveLog: (obj: DisassociateVPCFromHostedZoneRequest) => any;
}

export interface DisassociateVPCFromHostedZoneResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace DisassociateVPCFromHostedZoneResponse {
    
    const filterSensitiveLog: (obj: DisassociateVPCFromHostedZoneResponse) => any;
}

export declare class LastVPCAssociation extends __BaseException {
    readonly name: "LastVPCAssociation";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LastVPCAssociation, __BaseException>);
}

export declare class VPCAssociationNotFound extends __BaseException {
    readonly name: "VPCAssociationNotFound";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<VPCAssociationNotFound, __BaseException>);
}
export interface EnableHostedZoneDNSSECRequest {
    
    HostedZoneId: string | undefined;
}
export declare namespace EnableHostedZoneDNSSECRequest {
    
    const filterSensitiveLog: (obj: EnableHostedZoneDNSSECRequest) => any;
}
export interface EnableHostedZoneDNSSECResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace EnableHostedZoneDNSSECResponse {
    
    const filterSensitiveLog: (obj: EnableHostedZoneDNSSECResponse) => any;
}

export declare class HostedZonePartiallyDelegated extends __BaseException {
    readonly name: "HostedZonePartiallyDelegated";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<HostedZonePartiallyDelegated, __BaseException>);
}

export declare class KeySigningKeyWithActiveStatusNotFound extends __BaseException {
    readonly name: "KeySigningKeyWithActiveStatusNotFound";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<KeySigningKeyWithActiveStatusNotFound, __BaseException>);
}

export interface GetAccountLimitRequest {
    
    Type: AccountLimitType | string | undefined;
}
export declare namespace GetAccountLimitRequest {
    
    const filterSensitiveLog: (obj: GetAccountLimitRequest) => any;
}

export interface GetAccountLimitResponse {
    
    Limit: AccountLimit | undefined;
    
    Count: number | undefined;
}
export declare namespace GetAccountLimitResponse {
    
    const filterSensitiveLog: (obj: GetAccountLimitResponse) => any;
}

export interface GetChangeRequest {
    
    Id: string | undefined;
}
export declare namespace GetChangeRequest {
    
    const filterSensitiveLog: (obj: GetChangeRequest) => any;
}

export interface GetChangeResponse {
    
    ChangeInfo: ChangeInfo | undefined;
}
export declare namespace GetChangeResponse {
    
    const filterSensitiveLog: (obj: GetChangeResponse) => any;
}

export declare class NoSuchChange extends __BaseException {
    readonly name: "NoSuchChange";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchChange, __BaseException>);
}

export interface GetCheckerIpRangesRequest {
}
export declare namespace GetCheckerIpRangesRequest {
    
    const filterSensitiveLog: (obj: GetCheckerIpRangesRequest) => any;
}

export interface GetCheckerIpRangesResponse {
    
    CheckerIpRanges: string[] | undefined;
}
export declare namespace GetCheckerIpRangesResponse {
    
    const filterSensitiveLog: (obj: GetCheckerIpRangesResponse) => any;
}
export interface GetDNSSECRequest {
    
    HostedZoneId: string | undefined;
}
export declare namespace GetDNSSECRequest {
    
    const filterSensitiveLog: (obj: GetDNSSECRequest) => any;
}

export interface DNSSECStatus {
    
    ServeSignature?: string;
    
    StatusMessage?: string;
}
export declare namespace DNSSECStatus {
    
    const filterSensitiveLog: (obj: DNSSECStatus) => any;
}
export interface GetDNSSECResponse {
    
    Status: DNSSECStatus | undefined;
    
    KeySigningKeys: KeySigningKey[] | undefined;
}
export declare namespace GetDNSSECResponse {
    
    const filterSensitiveLog: (obj: GetDNSSECResponse) => any;
}

export interface GetGeoLocationRequest {
    
    ContinentCode?: string;
    
    CountryCode?: string;
    
    SubdivisionCode?: string;
}
export declare namespace GetGeoLocationRequest {
    
    const filterSensitiveLog: (obj: GetGeoLocationRequest) => any;
}

export interface GeoLocationDetails {
    
    ContinentCode?: string;
    
    ContinentName?: string;
    
    CountryCode?: string;
    
    CountryName?: string;
    
    SubdivisionCode?: string;
    
    SubdivisionName?: string;
}
export declare namespace GeoLocationDetails {
    
    const filterSensitiveLog: (obj: GeoLocationDetails) => any;
}

export interface GetGeoLocationResponse {
    
    GeoLocationDetails: GeoLocationDetails | undefined;
}
export declare namespace GetGeoLocationResponse {
    
    const filterSensitiveLog: (obj: GetGeoLocationResponse) => any;
}

export declare class NoSuchGeoLocation extends __BaseException {
    readonly name: "NoSuchGeoLocation";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NoSuchGeoLocation, __BaseException>);
}

export interface GetHealthCheckRequest {
    
    HealthCheckId: string | undefined;
}
export declare namespace GetHealthCheckRequest {
    
    const filterSensitiveLog: (obj: GetHealthCheckRequest) => any;
}

export interface GetHealthCheckResponse {
    
    HealthCheck: HealthCheck | undefined;
}
export declare namespace GetHealthCheckResponse {
    
    const filterSensitiveLog: (obj: GetHealthCheckResponse) => any;
}

export declare class IncompatibleVersion extends __BaseException {
    readonly name: "IncompatibleVersion";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<IncompatibleVersion, __BaseException>);
}

export interface GetHealthCheckCountRequest {
}
export declare namespace GetHealthCheckCountRequest {
    
    const filterSensitiveLog: (obj: GetHealthCheckCountRequest) => any;
}

export interface GetHealthCheckCountResponse {
    
    HealthCheckCount: number | undefined;
}
export declare namespace GetHealthCheckCountResponse {
    
    const filterSensitiveLog: (obj: GetHealthCheckCountResponse) => any;
}

export interface GetHealthCheckLastFailureReasonRequest {
    
    HealthCheckId: string | undefined;
}
export declare namespace GetHealthCheckLastFailureReasonRequest {
    
    const filterSensitiveLog: (obj: GetHealthCheckLastFailureReasonRequest) => any;
}

export interface StatusReport {
    
    Status?: string;
    
    CheckedTime?: Date;
}
export declare namespace StatusReport {
    
    const filterSensitiveLog: (obj: StatusReport) => any;
}

export interface HealthCheckObservation {
    
    Region?: HealthCheckRegion | string;
    
    IPAddress?: string;
    
    StatusReport?: StatusReport;
}
export declare namespace HealthCheckObservation {
    
    const filterSensitiveLog: (obj: HealthCheckObservation) => any;
}

export interface GetHealthCheckLastFailureReasonResponse {
    
    HealthCheckObservations: HealthCheckObservation[] | undefined;
}
export declare namespace GetHealthCheckLastFailureReasonResponse {
    
    const filterSensitiveLog: (obj: GetHealthCheckLastFailureReasonResponse) => any;
}

export interface GetHealthCheckStatusRequest {
    
    HealthCheckId: string | undefined;
}
export declare namespace GetHealthCheckStatusRequest {
    
    const filterSensitiveLog: (obj: GetHealthCheckStatusRequest) => any;
}

export interface GetHealthCheckStatusResponse {
    
    HealthCheckObservations: HealthCheckObservation[] | undefined;
}
export declare namespace GetHealthCheckStatusResponse {
    
    const filterSensitiveLog: (obj: GetHealthCheckStatusResponse) => any;
}

export interface GetHostedZoneRequest {
    
    Id: string | undefined;
}
export declare namespace GetHostedZoneRequest {
    
    const filterSensitiveLog: (obj: GetHostedZoneRequest) => any;
}

export interface GetHostedZoneResponse {
    
    HostedZone: HostedZone | undefined;
    
    DelegationSet?: DelegationSet;
    
    VPCs?: VPC[];
}
export declare namespace GetHostedZoneResponse {
    
    const filterSensitiveLog: (obj: GetHostedZoneResponse) => any;
}

export interface GetHostedZoneCountRequest {
}
export declare namespace GetHostedZoneCountRequest {
    
    const filterSensitiveLog: (obj: GetHostedZoneCountRequest) => any;
}

export interface GetHostedZoneCountResponse {
    
    HostedZoneCount: number | undefined;
}
export declare namespace GetHostedZoneCountResponse {
    
    const filterSensitiveLog: (obj: GetHostedZoneCountResponse) => any;
}
export declare type HostedZoneLimitType = "MAX_RRSETS_BY_ZONE" | "MAX_VPCS_ASSOCIATED_BY_ZONE";

export interface GetHostedZoneLimitRequest {
    
    Type: HostedZoneLimitType | string | undefined;
    
    HostedZoneId: string | undefined;
}
export declare namespace GetHostedZoneLimitRequest {
    
    const filterSensitiveLog: (obj: GetHostedZoneLimitRequest) => any;
}

export interface HostedZoneLimit {
    
    Type: HostedZoneLimitType | string | undefined;
    
    Value: number | undefined;
}
export declare namespace HostedZoneLimit {
    
    const filterSensitiveLog: (obj: HostedZoneLimit) => any;
}

export interface GetHostedZoneLimitResponse {
    
    Limit: HostedZoneLimit | undefined;
    
    Count: number | undefined;
}
export declare namespace GetHostedZoneLimitResponse {
    
    const filterSensitiveLog: (obj: GetHostedZoneLimitResponse) => any;
}

export declare class HostedZoneNotPrivate extends __BaseException {
    readonly name: "HostedZoneNotPrivate";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<HostedZoneNotPrivate, __BaseException>);
}
export interface GetQueryLoggingConfigRequest {
    
    Id: string | undefined;
}
export declare namespace GetQueryLoggingConfigRequest {
    
    const filterSensitiveLog: (obj: GetQueryLoggingConfigRequest) => any;
}
export interface GetQueryLoggingConfigResponse {
    
    QueryLoggingConfig: QueryLoggingConfig | undefined;
}
export declare namespace GetQueryLoggingConfigResponse {
    
    const filterSensitiveLog: (obj: GetQueryLoggingConfigResponse) => any;
}

export interface GetReusableDelegationSetRequest {
    
    Id: string | undefined;
}
export declare namespace GetReusableDelegationSetRequest {
    
    const filterSensitiveLog: (obj: GetReusableDelegationSetRequest) => any;
}

export interface GetReusableDelegationSetResponse {
    
    DelegationSet: DelegationSet | undefined;
}
export declare namespace GetReusableDelegationSetResponse {
    
    const filterSensitiveLog: (obj: GetReusableDelegationSetResponse) => any;
}
export declare type ReusableDelegationSetLimitType = "MAX_ZONES_BY_REUSABLE_DELEGATION_SET";

export interface GetReusableDelegationSetLimitRequest {
    
    Type: ReusableDelegationSetLimitType | string | undefined;
    
    DelegationSetId: string | undefined;
}
export declare namespace GetReusableDelegationSetLimitRequest {
    
    const filterSensitiveLog: (obj: GetReusableDelegationSetLimitRequest) => any;
}

export interface ReusableDelegationSetLimit {
    
    Type: ReusableDelegationSetLimitType | string | undefined;
    
    Value: number | undefined;
}
export declare namespace ReusableDelegationSetLimit {
    
    const filterSensitiveLog: (obj: ReusableDelegationSetLimit) => any;
}

export interface GetReusableDelegationSetLimitResponse {
    
    Limit: ReusableDelegationSetLimit | undefined;
    
    Count: number | undefined;
}
export declare namespace GetReusableDelegationSetLimitResponse {
    
    const filterSensitiveLog: (obj: GetReusableDelegationSetLimitResponse) => any;
}

export interface GetTrafficPolicyRequest {
    
    Id: string | undefined;
    
    Version: number | undefined;
}
export declare namespace GetTrafficPolicyRequest {
    
    const filterSensitiveLog: (obj: GetTrafficPolicyRequest) => any;
}

export interface GetTrafficPolicyResponse {
    
    TrafficPolicy: TrafficPolicy | undefined;
}
export declare namespace GetTrafficPolicyResponse {
    
    const filterSensitiveLog: (obj: GetTrafficPolicyResponse) => any;
}

export interface GetTrafficPolicyInstanceRequest {
    
    Id: string | undefined;
}
export declare namespace GetTrafficPolicyInstanceRequest {
    
    const filterSensitiveLog: (obj: GetTrafficPolicyInstanceRequest) => any;
}

export interface GetTrafficPolicyInstanceResponse {
    
    TrafficPolicyInstance: TrafficPolicyInstance | undefined;
}
export declare namespace GetTrafficPolicyInstanceResponse {
    
    const filterSensitiveLog: (obj: GetTrafficPolicyInstanceResponse) => any;
}

export interface GetTrafficPolicyInstanceCountRequest {
}
export declare namespace GetTrafficPolicyInstanceCountRequest {
    
    const filterSensitiveLog: (obj: GetTrafficPolicyInstanceCountRequest) => any;
}

export interface GetTrafficPolicyInstanceCountResponse {
    
    TrafficPolicyInstanceCount: number | undefined;
}
export declare namespace GetTrafficPolicyInstanceCountResponse {
    
    const filterSensitiveLog: (obj: GetTrafficPolicyInstanceCountResponse) => any;
}
export interface ListCidrBlocksRequest {
    
    CollectionId: string | undefined;
    
    LocationName?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListCidrBlocksRequest {
    
    const filterSensitiveLog: (obj: ListCidrBlocksRequest) => any;
}

export interface CidrBlockSummary {
    
    CidrBlock?: string;
    
    LocationName?: string;
}
export declare namespace CidrBlockSummary {
    
    const filterSensitiveLog: (obj: CidrBlockSummary) => any;
}
export interface ListCidrBlocksResponse {
    
    NextToken?: string;
    
    CidrBlocks?: CidrBlockSummary[];
}
export declare namespace ListCidrBlocksResponse {
    
    const filterSensitiveLog: (obj: ListCidrBlocksResponse) => any;
}

export declare class NoSuchCidrLocationException extends __BaseException {
    readonly name: "NoSuchCidrLocationException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<NoSuchCidrLocationException, __BaseException>);
}
export interface ListCidrCollectionsRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListCidrCollectionsRequest {
    
    const filterSensitiveLog: (obj: ListCidrCollectionsRequest) => any;
}

export interface CollectionSummary {
    
    Arn?: string;
    
    Id?: string;
    
    Name?: string;
    
    Version?: number;
}
export declare namespace CollectionSummary {
    
    const filterSensitiveLog: (obj: CollectionSummary) => any;
}
export interface ListCidrCollectionsResponse {
    
    NextToken?: string;
    
    CidrCollections?: CollectionSummary[];
}
export declare namespace ListCidrCollectionsResponse {
    
    const filterSensitiveLog: (obj: ListCidrCollectionsResponse) => any;
}
export interface ListCidrLocationsRequest {
    
    CollectionId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListCidrLocationsRequest {
    
    const filterSensitiveLog: (obj: ListCidrLocationsRequest) => any;
}

export interface LocationSummary {
    
    LocationName?: string;
}
export declare namespace LocationSummary {
    
    const filterSensitiveLog: (obj: LocationSummary) => any;
}
export interface ListCidrLocationsResponse {
    
    NextToken?: string;
    
    CidrLocations?: LocationSummary[];
}
export declare namespace ListCidrLocationsResponse {
    
    const filterSensitiveLog: (obj: ListCidrLocationsResponse) => any;
}

export interface ListGeoLocationsRequest {
    
    StartContinentCode?: string;
    
    StartCountryCode?: string;
    
    StartSubdivisionCode?: string;
    
    MaxItems?: number;
}
export declare namespace ListGeoLocationsRequest {
    
    const filterSensitiveLog: (obj: ListGeoLocationsRequest) => any;
}

export interface ListGeoLocationsResponse {
    
    GeoLocationDetailsList: GeoLocationDetails[] | undefined;
    
    IsTruncated: boolean | undefined;
    
    NextContinentCode?: string;
    
    NextCountryCode?: string;
    
    NextSubdivisionCode?: string;
    
    MaxItems: number | undefined;
}
export declare namespace ListGeoLocationsResponse {
    
    const filterSensitiveLog: (obj: ListGeoLocationsResponse) => any;
}

export interface ListHealthChecksRequest {
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListHealthChecksRequest {
    
    const filterSensitiveLog: (obj: ListHealthChecksRequest) => any;
}

export interface ListHealthChecksResponse {
    
    HealthChecks: HealthCheck[] | undefined;
    
    Marker: string | undefined;
    
    IsTruncated: boolean | undefined;
    
    NextMarker?: string;
    
    MaxItems: number | undefined;
}
export declare namespace ListHealthChecksResponse {
    
    const filterSensitiveLog: (obj: ListHealthChecksResponse) => any;
}

export interface ListHostedZonesRequest {
    
    Marker?: string;
    
    MaxItems?: number;
    
    DelegationSetId?: string;
}
export declare namespace ListHostedZonesRequest {
    
    const filterSensitiveLog: (obj: ListHostedZonesRequest) => any;
}
export interface ListHostedZonesResponse {
    
    HostedZones: HostedZone[] | undefined;
    
    Marker: string | undefined;
    
    IsTruncated: boolean | undefined;
    
    NextMarker?: string;
    
    MaxItems: number | undefined;
}
export declare namespace ListHostedZonesResponse {
    
    const filterSensitiveLog: (obj: ListHostedZonesResponse) => any;
}

export interface ListHostedZonesByNameRequest {
    
    DNSName?: string;
    
    HostedZoneId?: string;
    
    MaxItems?: number;
}
export declare namespace ListHostedZonesByNameRequest {
    
    const filterSensitiveLog: (obj: ListHostedZonesByNameRequest) => any;
}

export interface ListHostedZonesByNameResponse {
    
    HostedZones: HostedZone[] | undefined;
    
    DNSName?: string;
    
    HostedZoneId?: string;
    
    IsTruncated: boolean | undefined;
    
    NextDNSName?: string;
    
    NextHostedZoneId?: string;
    
    MaxItems: number | undefined;
}
export declare namespace ListHostedZonesByNameResponse {
    
    const filterSensitiveLog: (obj: ListHostedZonesByNameResponse) => any;
}

export declare class InvalidPaginationToken extends __BaseException {
    readonly name: "InvalidPaginationToken";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidPaginationToken, __BaseException>);
}

export interface ListHostedZonesByVPCRequest {
    
    VPCId: string | undefined;
    
    VPCRegion: VPCRegion | string | undefined;
    
    MaxItems?: number;
    
    NextToken?: string;
}
export declare namespace ListHostedZonesByVPCRequest {
    
    const filterSensitiveLog: (obj: ListHostedZonesByVPCRequest) => any;
}

export interface HostedZoneOwner {
    
    OwningAccount?: string;
    
    OwningService?: string;
}
export declare namespace HostedZoneOwner {
    
    const filterSensitiveLog: (obj: HostedZoneOwner) => any;
}

export interface HostedZoneSummary {
    
    HostedZoneId: string | undefined;
    
    Name: string | undefined;
    
    Owner: HostedZoneOwner | undefined;
}
export declare namespace HostedZoneSummary {
    
    const filterSensitiveLog: (obj: HostedZoneSummary) => any;
}
export interface ListHostedZonesByVPCResponse {
    
    HostedZoneSummaries: HostedZoneSummary[] | undefined;
    
    MaxItems: number | undefined;
    
    NextToken?: string;
}
export declare namespace ListHostedZonesByVPCResponse {
    
    const filterSensitiveLog: (obj: ListHostedZonesByVPCResponse) => any;
}
export interface ListQueryLoggingConfigsRequest {
    
    HostedZoneId?: string;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListQueryLoggingConfigsRequest {
    
    const filterSensitiveLog: (obj: ListQueryLoggingConfigsRequest) => any;
}
export interface ListQueryLoggingConfigsResponse {
    
    QueryLoggingConfigs: QueryLoggingConfig[] | undefined;
    
    NextToken?: string;
}
export declare namespace ListQueryLoggingConfigsResponse {
    
    const filterSensitiveLog: (obj: ListQueryLoggingConfigsResponse) => any;
}

export interface ListResourceRecordSetsRequest {
    
    HostedZoneId: string | undefined;
    
    StartRecordName?: string;
    
    StartRecordType?: RRType | string;
    
    StartRecordIdentifier?: string;
    
    MaxItems?: number;
}
export declare namespace ListResourceRecordSetsRequest {
    
    const filterSensitiveLog: (obj: ListResourceRecordSetsRequest) => any;
}

export interface ListResourceRecordSetsResponse {
    
    ResourceRecordSets: ResourceRecordSet[] | undefined;
    
    IsTruncated: boolean | undefined;
    
    NextRecordName?: string;
    
    NextRecordType?: RRType | string;
    
    NextRecordIdentifier?: string;
    
    MaxItems: number | undefined;
}
export declare namespace ListResourceRecordSetsResponse {
    
    const filterSensitiveLog: (obj: ListResourceRecordSetsResponse) => any;
}

export interface ListReusableDelegationSetsRequest {
    
    Marker?: string;
    
    MaxItems?: number;
}
export declare namespace ListReusableDelegationSetsRequest {
    
    const filterSensitiveLog: (obj: ListReusableDelegationSetsRequest) => any;
}

export interface ListReusableDelegationSetsResponse {
    
    DelegationSets: DelegationSet[] | undefined;
    
    Marker: string | undefined;
    
    IsTruncated: boolean | undefined;
    
    NextMarker?: string;
    
    MaxItems: number | undefined;
}
export declare namespace ListReusableDelegationSetsResponse {
    
    const filterSensitiveLog: (obj: ListReusableDelegationSetsResponse) => any;
}

export interface ListTagsForResourceRequest {
    
    ResourceType: TagResourceType | string | undefined;
    
    ResourceId: string | undefined;
}
export declare namespace ListTagsForResourceRequest {
    
    const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
}

export interface ResourceTagSet {
    
    ResourceType?: TagResourceType | string;
    
    ResourceId?: string;
    
    Tags?: Tag[];
}
export declare namespace ResourceTagSet {
    
    const filterSensitiveLog: (obj: ResourceTagSet) => any;
}

export interface ListTagsForResourceResponse {
    
    ResourceTagSet: ResourceTagSet | undefined;
}
export declare namespace ListTagsForResourceResponse {
    
    const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
}

export interface ListTagsForResourcesRequest {
    
    ResourceType: TagResourceType | string | undefined;
    
    ResourceIds: string[] | undefined;
}
export declare namespace ListTagsForResourcesRequest {
    
    const filterSensitiveLog: (obj: ListTagsForResourcesRequest) => any;
}

export interface ListTagsForResourcesResponse {
    
    ResourceTagSets: ResourceTagSet[] | undefined;
}
export declare namespace ListTagsForResourcesResponse {
    
    const filterSensitiveLog: (obj: ListTagsForResourcesResponse) => any;
}

export interface ListTrafficPoliciesRequest {
    
    TrafficPolicyIdMarker?: string;
    
    MaxItems?: number;
}
export declare namespace ListTrafficPoliciesRequest {
    
    const filterSensitiveLog: (obj: ListTrafficPoliciesRequest) => any;
}

export interface TrafficPolicySummary {
    
    Id: string | undefined;
    
    Name: string | undefined;
    
    Type: RRType | string | undefined;
    
    LatestVersion: number | undefined;
    
    TrafficPolicyCount: number | undefined;
}
export declare namespace TrafficPolicySummary {
    
    const filterSensitiveLog: (obj: TrafficPolicySummary) => any;
}

export interface ListTrafficPoliciesResponse {
    
    TrafficPolicySummaries: TrafficPolicySummary[] | undefined;
    
    IsTruncated: boolean | undefined;
    
    TrafficPolicyIdMarker: string | undefined;
    
    MaxItems: number | undefined;
}
export declare namespace ListTrafficPoliciesResponse {
    
    const filterSensitiveLog: (obj: ListTrafficPoliciesResponse) => any;
}

export interface ListTrafficPolicyInstancesRequest {
    
    HostedZoneIdMarker?: string;
    
    TrafficPolicyInstanceNameMarker?: string;
    
    TrafficPolicyInstanceTypeMarker?: RRType | string;
    
    MaxItems?: number;
}
export declare namespace ListTrafficPolicyInstancesRequest {
    
    const filterSensitiveLog: (obj: ListTrafficPolicyInstancesRequest) => any;
}

export interface ListTrafficPolicyInstancesResponse {
    
    TrafficPolicyInstances: TrafficPolicyInstance[] | undefined;
    
    HostedZoneIdMarker?: string;
    
    TrafficPolicyInstanceNameMarker?: string;
    
    TrafficPolicyInstanceTypeMarker?: RRType | string;
    
    IsTruncated: boolean | undefined;
    
    MaxItems: number | undefined;
}
export declare namespace ListTrafficPolicyInstancesResponse {
    
    const filterSensitiveLog: (obj: ListTrafficPolicyInstancesResponse) => any;
}

export interface ListTrafficPolicyInstancesByHostedZoneRequest {
    
    HostedZoneId: string | undefined;
    
    TrafficPolicyInstanceNameMarker?: string;
    
    TrafficPolicyInstanceTypeMarker?: RRType | string;
    
    MaxItems?: number;
}
export declare namespace ListTrafficPolicyInstancesByHostedZoneRequest {
    
    const filterSensitiveLog: (obj: ListTrafficPolicyInstancesByHostedZoneRequest) => any;
}

export interface ListTrafficPolicyInstancesByHostedZoneResponse {
    
    TrafficPolicyInstances: TrafficPolicyInstance[] | undefined;
    
    TrafficPolicyInstanceNameMarker?: string;
    
    TrafficPolicyInstanceTypeMarker?: RRType | string;
    
    IsTruncated: boolean | undefined;
    
    MaxItems: number | undefined;
}
export declare namespace ListTrafficPolicyInstancesByHostedZoneResponse {
    
    const filterSensitiveLog: (obj: ListTrafficPolicyInstancesByHostedZoneResponse) => any;
}

export interface ListTrafficPolicyInstancesByPolicyRequest {
    
    TrafficPolicyId: string | undefined;
    
    TrafficPolicyVersion: number | undefined;
    
    HostedZoneIdMarker?: string;
    
    TrafficPolicyInstanceNameMarker?: string;
    
    TrafficPolicyInstanceTypeMarker?: RRType | string;
    
    MaxItems?: number;
}
export declare namespace ListTrafficPolicyInstancesByPolicyRequest {
    
    const filterSensitiveLog: (obj: ListTrafficPolicyInstancesByPolicyRequest) => any;
}

export interface ListTrafficPolicyInstancesByPolicyResponse {
    
    TrafficPolicyInstances: TrafficPolicyInstance[] | undefined;
    
    HostedZoneIdMarker?: string;
    
    TrafficPolicyInstanceNameMarker?: string;
    
    TrafficPolicyInstanceTypeMarker?: RRType | string;
    
    IsTruncated: boolean | undefined;
    
    MaxItems: number | undefined;
}
export declare namespace ListTrafficPolicyInstancesByPolicyResponse {
    
    const filterSensitiveLog: (obj: ListTrafficPolicyInstancesByPolicyResponse) => any;
}

export interface ListTrafficPolicyVersionsRequest {
    
    Id: string | undefined;
    
    TrafficPolicyVersionMarker?: string;
    
    MaxItems?: number;
}
export declare namespace ListTrafficPolicyVersionsRequest {
    
    const filterSensitiveLog: (obj: ListTrafficPolicyVersionsRequest) => any;
}

export interface ListTrafficPolicyVersionsResponse {
    
    TrafficPolicies: TrafficPolicy[] | undefined;
    
    IsTruncated: boolean | undefined;
    
    TrafficPolicyVersionMarker: string | undefined;
    
    MaxItems: number | undefined;
}
export declare namespace ListTrafficPolicyVersionsResponse {
    
    const filterSensitiveLog: (obj: ListTrafficPolicyVersionsResponse) => any;
}

export interface ListVPCAssociationAuthorizationsRequest {
    
    HostedZoneId: string | undefined;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListVPCAssociationAuthorizationsRequest {
    
    const filterSensitiveLog: (obj: ListVPCAssociationAuthorizationsRequest) => any;
}

export interface ListVPCAssociationAuthorizationsResponse {
    
    HostedZoneId: string | undefined;
    
    NextToken?: string;
    
    VPCs: VPC[] | undefined;
}
export declare namespace ListVPCAssociationAuthorizationsResponse {
    
    const filterSensitiveLog: (obj: ListVPCAssociationAuthorizationsResponse) => any;
}

export interface TestDNSAnswerRequest {
    
    HostedZoneId: string | undefined;
    
    RecordName: string | undefined;
    
    RecordType: RRType | string | undefined;
    
    ResolverIP?: string;
    
    EDNS0ClientSubnetIP?: string;
    
    EDNS0ClientSubnetMask?: string;
}
export declare namespace TestDNSAnswerRequest {
    
    const filterSensitiveLog: (obj: TestDNSAnswerRequest) => any;
}

export interface TestDNSAnswerResponse {
    
    Nameserver: string | undefined;
    
    RecordName: string | undefined;
    
    RecordType: RRType | string | undefined;
    
    RecordData: string[] | undefined;
    
    ResponseCode: string | undefined;
    
    Protocol: string | undefined;
}
export declare namespace TestDNSAnswerResponse {
    
    const filterSensitiveLog: (obj: TestDNSAnswerResponse) => any;
}

export declare class HealthCheckVersionMismatch extends __BaseException {
    readonly name: "HealthCheckVersionMismatch";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<HealthCheckVersionMismatch, __BaseException>);
}
export declare type ResettableElementName = "ChildHealthChecks" | "FullyQualifiedDomainName" | "Regions" | "ResourcePath";

export interface UpdateHealthCheckRequest {
    
    HealthCheckId: string | undefined;
    
    HealthCheckVersion?: number;
    
    IPAddress?: string;
    
    Port?: number;
    
    ResourcePath?: string;
    
    FullyQualifiedDomainName?: string;
    
    SearchString?: string;
    
    FailureThreshold?: number;
    
    Inverted?: boolean;
    
    Disabled?: boolean;
    
    HealthThreshold?: number;
    
    ChildHealthChecks?: string[];
    
    EnableSNI?: boolean;
    
    Regions?: (HealthCheckRegion | string)[];
    
    AlarmIdentifier?: AlarmIdentifier;
    
    InsufficientDataHealthStatus?: InsufficientDataHealthStatus | string;
    
    ResetElements?: (ResettableElementName | string)[];
}
export declare namespace UpdateHealthCheckRequest {
    
    const filterSensitiveLog: (obj: UpdateHealthCheckRequest) => any;
}

export interface UpdateHealthCheckResponse {
    
    HealthCheck: HealthCheck | undefined;
}
export declare namespace UpdateHealthCheckResponse {
    
    const filterSensitiveLog: (obj: UpdateHealthCheckResponse) => any;
}

export interface UpdateHostedZoneCommentRequest {
    
    Id: string | undefined;
    
    Comment?: string;
}
export declare namespace UpdateHostedZoneCommentRequest {
    
    const filterSensitiveLog: (obj: UpdateHostedZoneCommentRequest) => any;
}

export interface UpdateHostedZoneCommentResponse {
    
    HostedZone: HostedZone | undefined;
}
export declare namespace UpdateHostedZoneCommentResponse {
    
    const filterSensitiveLog: (obj: UpdateHostedZoneCommentResponse) => any;
}

export interface UpdateTrafficPolicyCommentRequest {
    
    Id: string | undefined;
    
    Version: number | undefined;
    
    Comment: string | undefined;
}
export declare namespace UpdateTrafficPolicyCommentRequest {
    
    const filterSensitiveLog: (obj: UpdateTrafficPolicyCommentRequest) => any;
}

export interface UpdateTrafficPolicyCommentResponse {
    
    TrafficPolicy: TrafficPolicy | undefined;
}
export declare namespace UpdateTrafficPolicyCommentResponse {
    
    const filterSensitiveLog: (obj: UpdateTrafficPolicyCommentResponse) => any;
}

export declare class ConflictingTypes extends __BaseException {
    readonly name: "ConflictingTypes";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ConflictingTypes, __BaseException>);
}

export interface UpdateTrafficPolicyInstanceRequest {
    
    Id: string | undefined;
    
    TTL: number | undefined;
    
    TrafficPolicyId: string | undefined;
    
    TrafficPolicyVersion: number | undefined;
}
export declare namespace UpdateTrafficPolicyInstanceRequest {
    
    const filterSensitiveLog: (obj: UpdateTrafficPolicyInstanceRequest) => any;
}

export interface UpdateTrafficPolicyInstanceResponse {
    
    TrafficPolicyInstance: TrafficPolicyInstance | undefined;
}
export declare namespace UpdateTrafficPolicyInstanceResponse {
    
    const filterSensitiveLog: (obj: UpdateTrafficPolicyInstanceResponse) => any;
}
