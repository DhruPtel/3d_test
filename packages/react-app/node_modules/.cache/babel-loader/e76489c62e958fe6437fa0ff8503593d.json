{"ast":null,"code":"import _slicedToArray from \"C:/Users/User/don1/depend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { multicall as multicall1, multicall2, useConfig, useNetwork } from '../../..';\nimport { useReadonlyNetworks } from '../../network';\nimport { useBlockNumbers } from '../../blockNumber/blockNumbers';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer } from '../common';\nimport { getUniqueCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\n\nfunction composeChainState(networks, state, multicallAddresses) {\n  return fromEntries(Object.keys(networks).map(function (chainId) {\n    return [Number(chainId), {\n      value: state[Number(chainId)],\n      multicallAddress: multicallAddresses[Number(chainId)]\n    }];\n  }));\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function MultiChainStateProvider(_ref) {\n  var children = _ref.children,\n      multicallAddresses = _ref.multicallAddresses;\n\n  var _useConfig = useConfig(),\n      multicallVersion = _useConfig.multicallVersion;\n\n  var networks = useReadonlyNetworks();\n  var blockNumbers = useBlockNumbers();\n\n  var _useNetwork = useNetwork(),\n      reportError = _useNetwork.reportError;\n\n  var _useReducer = useReducer(callsReducer, []),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      calls = _useReducer2[0],\n      dispatchCalls = _useReducer2[1];\n\n  var _useReducer3 = useReducer(chainStateReducer, {}),\n      _useReducer4 = _slicedToArray(_useReducer3, 2),\n      state = _useReducer4[0],\n      dispatchState = _useReducer4[1];\n\n  var multicall = multicallVersion === 1 ? multicall1 : multicall2;\n\n  var _useDebouncePair = useDebouncePair(calls, networks, 50),\n      _useDebouncePair2 = _slicedToArray(_useDebouncePair, 2),\n      debouncedCalls = _useDebouncePair2[0],\n      debouncedNetworks = _useDebouncePair2[1];\n\n  var uniqueCalls = useMemo(function () {\n    return getUniqueCalls(debouncedCalls);\n  }, [debouncedCalls]); // used for deep equality in hook dependencies\n\n  var uniqueCallsJSON = JSON.stringify(debouncedCalls);\n  var chainId = useChainId();\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n\n  function multicallForChain(chainId, provider) {\n    var blockNumber = blockNumbers[chainId];\n    var multicallAddress = multicallAddresses[chainId];\n\n    if (!provider || !blockNumber) {\n      return;\n    }\n\n    if (!multicallAddress) {\n      reportError(new Error(\"Missing multicall address for chain id \".concat(chainId)));\n      return;\n    }\n\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return;\n    }\n\n    var callsOnThisChain = uniqueCalls.filter(function (call) {\n      return call.chainId === chainId;\n    });\n\n    if (callsOnThisChain.length === 0) {\n      return;\n    }\n\n    performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, reportError);\n  }\n\n  useEffect(function () {\n    for (var _i = 0, _Object$entries = Object.entries(networks); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          _chainId = _Object$entries$_i[0],\n          provider = _Object$entries$_i[1];\n\n      multicallForChain(Number(_chainId), provider);\n    }\n  }, [blockNumbers, networks, multicallAddresses, uniqueCallsJSON]);\n  var chains = useMemo(function () {\n    return composeChainState(networks, state, multicallAddresses);\n  }, [state, multicallAddresses, networks]);\n  var provided = {\n    chains: chains,\n    dispatchCalls: dispatchCalls\n  };\n  return _jsx(MultiChainStatesContext.Provider, {\n    value: provided,\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/multiChainStates/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { multicall as multicall1, multicall2, useConfig, useNetwork } from '../../..';\nimport { useReadonlyNetworks } from '../../network';\nimport { useBlockNumbers } from '../../blockNumber/blockNumbers';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer } from '../common';\nimport { getUniqueCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\nfunction composeChainState(networks, state, multicallAddresses) {\n    return fromEntries(Object.keys(networks).map((chainId) => [\n        Number(chainId),\n        {\n            value: state[Number(chainId)],\n            multicallAddress: multicallAddresses[Number(chainId)],\n        },\n    ]));\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function MultiChainStateProvider({ children, multicallAddresses }) {\n    const { multicallVersion } = useConfig();\n    const networks = useReadonlyNetworks();\n    const blockNumbers = useBlockNumbers();\n    const { reportError } = useNetwork();\n    const [calls, dispatchCalls] = useReducer(callsReducer, []);\n    const [state, dispatchState] = useReducer(chainStateReducer, {});\n    const multicall = multicallVersion === 1 ? multicall1 : multicall2;\n    const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50);\n    const uniqueCalls = useMemo(() => getUniqueCalls(debouncedCalls), [debouncedCalls]);\n    // used for deep equality in hook dependencies\n    const uniqueCallsJSON = JSON.stringify(debouncedCalls);\n    const chainId = useChainId();\n    useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n    function multicallForChain(chainId, provider) {\n        const blockNumber = blockNumbers[chainId];\n        const multicallAddress = multicallAddresses[chainId];\n        if (!provider || !blockNumber) {\n            return;\n        }\n        if (!multicallAddress) {\n            reportError(new Error(`Missing multicall address for chain id ${chainId}`));\n            return;\n        }\n        if (debouncedNetworks !== networks) {\n            // Wait for debounce to catch up.\n            return;\n        }\n        const callsOnThisChain = uniqueCalls.filter((call) => call.chainId === chainId);\n        if (callsOnThisChain.length === 0) {\n            return;\n        }\n        performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, reportError);\n    }\n    useEffect(() => {\n        for (const [_chainId, provider] of Object.entries(networks)) {\n            multicallForChain(Number(_chainId), provider);\n        }\n    }, [blockNumbers, networks, multicallAddresses, uniqueCallsJSON]);\n    const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [\n        state,\n        multicallAddresses,\n        networks,\n    ]);\n    const provided = { chains, dispatchCalls };\n    return _jsx(MultiChainStatesContext.Provider, { value: provided, children: children });\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}